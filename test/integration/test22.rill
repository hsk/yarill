class derived < base
{
    def ctor() {}

    def f() override
    {
        p("derived::f");
    }
}

class base
{
    def ctor() {}
    //    virtual def f(): void;
    virtual def f(): void {
        p("base::f");
    }

    def base()
    {
        p("base");
    }
}

def main()
{
    val v = derived();
    val p_to_derived: ptr!(const(derived)) = &v;
    (*p_to_derived).f();
    p("expect => derived::f");

    val p_to_base: ptr!(const(base)) = &v;
    (*p_to_base).f();
    p("expect => derived::f");

    return 0;
}